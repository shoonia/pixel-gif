{"mappings":"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","sources":["node_modules/vanilla-colorful/src/lib/utils/math.ts","node_modules/vanilla-colorful/src/lib/utils/convert.ts","node_modules/vanilla-colorful/src/lib/utils/compare.ts","node_modules/vanilla-colorful/src/lib/utils/dom.ts","node_modules/vanilla-colorful/src/lib/components/slider.ts","node_modules/vanilla-colorful/src/lib/components/hue.ts","node_modules/vanilla-colorful/src/lib/components/saturation.ts","node_modules/vanilla-colorful/src/lib/components/color-picker.ts","node_modules/vanilla-colorful/src/lib/styles/color-picker.ts","node_modules/vanilla-colorful/src/lib/styles/hue.ts","node_modules/vanilla-colorful/src/lib/styles/saturation.ts","node_modules/vanilla-colorful/src/lib/entrypoints/hex.ts","node_modules/vanilla-colorful/src/hex-color-picker.ts"],"sourcesContent":["// Clamps a value between an upper and lower bound.\n// We use ternary operators because it makes the minified code\n// 2 times shorter then `Math.min(Math.max(a,b),c)`\nexport const clamp = (number: number, min = 0, max = 1): number => {\n  return number > max ? max : number < min ? min : number;\n};\n\nexport const round = (number: number, digits = 0, base = Math.pow(10, digits)): number => {\n  return Math.round(base * number) / base;\n};\n","import { RgbaColor, RgbColor, HslaColor, HslColor, HsvaColor, HsvColor } from '../types';\nimport { round } from './math.js';\n\n/**\n * Valid CSS <angle> units.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/angle\n */\nconst angleUnits: Record<string, number> = {\n  grad: 360 / 400,\n  turn: 360,\n  rad: 360 / (Math.PI * 2)\n};\n\nexport const hexToHsva = (hex: string): HsvaColor => rgbaToHsva(hexToRgba(hex));\n\nexport const hexToRgba = (hex: string): RgbaColor => {\n  if (hex[0] === '#') hex = hex.substr(1);\n\n  if (hex.length < 6) {\n    return {\n      r: parseInt(hex[0] + hex[0], 16),\n      g: parseInt(hex[1] + hex[1], 16),\n      b: parseInt(hex[2] + hex[2], 16),\n      a: 1\n    };\n  }\n\n  return {\n    r: parseInt(hex.substr(0, 2), 16),\n    g: parseInt(hex.substr(2, 2), 16),\n    b: parseInt(hex.substr(4, 2), 16),\n    a: 1\n  };\n};\n\nexport const parseHue = (value: string, unit = 'deg'): number => {\n  return Number(value) * (angleUnits[unit] || 1);\n};\n\nexport const hslaStringToHsva = (hslString: string): HsvaColor => {\n  const matcher =\n    /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(hslString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)\n  });\n};\n\nexport const hslStringToHsva = hslaStringToHsva;\n\nexport const hslaToHsva = ({ h, s, l, a }: HslaColor): HsvaColor => {\n  s *= (l < 50 ? l : 100 - l) / 100;\n\n  return {\n    h: h,\n    s: s > 0 ? ((2 * s) / (l + s)) * 100 : 0,\n    v: l + s,\n    a\n  };\n};\n\nexport const hsvaToHex = (hsva: HsvaColor): string => rgbaToHex(hsvaToRgba(hsva));\n\nexport const hsvaToHsla = ({ h, s, v, a }: HsvaColor): HslaColor => {\n  const hh = ((200 - s) * v) / 100;\n\n  return {\n    h: round(h),\n    s: round(hh > 0 && hh < 200 ? ((s * v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0),\n    l: round(hh / 2),\n    a: round(a, 2)\n  };\n};\n\nexport const hsvaToHsvString = (hsva: HsvaColor): string => {\n  const { h, s, v } = roundHsva(hsva);\n  return `hsv(${h}, ${s}%, ${v}%)`;\n};\n\nexport const hsvaToHsvaString = (hsva: HsvaColor): string => {\n  const { h, s, v, a } = roundHsva(hsva);\n  return `hsva(${h}, ${s}%, ${v}%, ${a})`;\n};\n\nexport const hsvaToHslString = (hsva: HsvaColor): string => {\n  const { h, s, l } = hsvaToHsla(hsva);\n  return `hsl(${h}, ${s}%, ${l}%)`;\n};\n\nexport const hsvaToHslaString = (hsva: HsvaColor): string => {\n  const { h, s, l, a } = hsvaToHsla(hsva);\n  return `hsla(${h}, ${s}%, ${l}%, ${a})`;\n};\n\nexport const hsvaToRgba = ({ h, s, v, a }: HsvaColor): RgbaColor => {\n  h = (h / 360) * 6;\n  s = s / 100;\n  v = v / 100;\n\n  const hh = Math.floor(h),\n    b = v * (1 - s),\n    c = v * (1 - (h - hh) * s),\n    d = v * (1 - (1 - h + hh) * s),\n    module = hh % 6;\n\n  return {\n    r: round([v, c, b, b, d, v][module] * 255),\n    g: round([d, v, v, c, b, b][module] * 255),\n    b: round([b, b, d, v, v, c][module] * 255),\n    a: round(a, 2)\n  };\n};\n\nexport const hsvaToRgbString = (hsva: HsvaColor): string => {\n  const { r, g, b } = hsvaToRgba(hsva);\n  return `rgb(${r}, ${g}, ${b})`;\n};\n\nexport const hsvaToRgbaString = (hsva: HsvaColor): string => {\n  const { r, g, b, a } = hsvaToRgba(hsva);\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\n\nexport const hsvaStringToHsva = (hsvString: string): HsvaColor => {\n  const matcher =\n    /hsva?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(hsvString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return roundHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    v: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)\n  });\n};\n\nexport const hsvStringToHsva = hsvaStringToHsva;\n\nexport const rgbaStringToHsva = (rgbaString: string): HsvaColor => {\n  const matcher =\n    /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(rgbaString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n    g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n    b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n    a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? 100 : 1)\n  });\n};\n\nexport const rgbStringToHsva = rgbaStringToHsva;\n\nconst format = (number: number) => {\n  const hex = number.toString(16);\n  return hex.length < 2 ? '0' + hex : hex;\n};\n\nexport const rgbaToHex = ({ r, g, b }: RgbaColor): string => {\n  return '#' + format(r) + format(g) + format(b);\n};\n\nexport const rgbaToHsva = ({ r, g, b, a }: RgbaColor): HsvaColor => {\n  const max = Math.max(r, g, b);\n  const delta = max - Math.min(r, g, b);\n\n  // prettier-ignore\n  const hh = delta\n    ? max === r\n      ? (g - b) / delta\n      : max === g\n        ? 2 + (b - r) / delta\n        : 4 + (r - g) / delta\n    : 0;\n\n  return {\n    h: round(60 * (hh < 0 ? hh + 6 : hh)),\n    s: round(max ? (delta / max) * 100 : 0),\n    v: round((max / 255) * 100),\n    a\n  };\n};\n\nexport const roundHsva = (hsva: HsvaColor): HsvaColor => ({\n  h: round(hsva.h),\n  s: round(hsva.s),\n  v: round(hsva.v),\n  a: round(hsva.a, 2)\n});\n\nexport const rgbaToRgb = ({ r, g, b }: RgbaColor): RgbColor => ({ r, g, b });\n\nexport const hslaToHsl = ({ h, s, l }: HslaColor): HslColor => ({ h, s, l });\n\nexport const hsvaToHsv = (hsva: HsvaColor): HsvColor => {\n  const { h, s, v } = roundHsva(hsva);\n  return { h, s, v };\n};\n","import { hexToRgba } from './convert.js';\nimport type { ObjectColor } from '../types';\n\nexport const equalColorObjects = (first: ObjectColor, second: ObjectColor): boolean => {\n  if (first === second) return true;\n\n  for (const prop in first) {\n    // The following allows for a type-safe calling of this function (first & second have to be HSL, HSV, or RGB)\n    // with type-unsafe iterating over object keys. TS does not allow this without an index (`[key: string]: number`)\n    // on an object to define how iteration is normally done. To ensure extra keys are not allowed on our types,\n    // we must cast our object to unknown (as RGB demands `r` be a key, while `Record<string, x>` does not care if\n    // there is or not), and then as a type TS can iterate over.\n    if (\n      (first as unknown as Record<string, number>)[prop] !==\n      (second as unknown as Record<string, number>)[prop]\n    )\n      return false;\n  }\n\n  return true;\n};\n\nexport const equalColorString = (first: string, second: string): boolean => {\n  return first.replace(/\\s/g, '') === second.replace(/\\s/g, '');\n};\n\nexport const equalHex = (first: string, second: string): boolean => {\n  if (first.toLowerCase() === second.toLowerCase()) return true;\n\n  // To compare colors like `#FFF` and `ffffff` we convert them into RGB objects\n  return equalColorObjects(hexToRgba(first), hexToRgba(second));\n};\n","const cache: Record<string, HTMLTemplateElement> = {};\n\nexport const tpl = (html: string): HTMLTemplateElement => {\n  let template = cache[html];\n  if (!template) {\n    template = document.createElement('template');\n    template.innerHTML = html;\n    cache[html] = template;\n  }\n  return template;\n};\n\nexport const fire = (target: HTMLElement, type: string, detail: Record<string, unknown>): void => {\n  target.dispatchEvent(\n    new CustomEvent(type, {\n      bubbles: true,\n      detail\n    })\n  );\n};\n","import type { HsvaColor } from '../types.js';\nimport { fire, tpl } from '../utils/dom.js';\nimport { clamp } from '../utils/math.js';\n\nexport interface Offset {\n  x: number;\n  y: number;\n}\n\nlet hasTouched = false;\n\n// Check if an event was triggered by touch\nconst isTouch = (e: Event): e is TouchEvent => 'touches' in e;\n\n// Prevent mobile browsers from handling mouse events (conflicting with touch ones).\n// If we detected a touch interaction before, we prefer reacting to touch events only.\nconst isValid = (event: Event): boolean => {\n  if (hasTouched && !isTouch(event)) return false;\n  if (!hasTouched) hasTouched = isTouch(event);\n  return true;\n};\n\nconst pointerMove = (target: Slider, event: Event): void => {\n  const pointer = isTouch(event) ? event.touches[0] : (event as MouseEvent);\n  const rect = target.el.getBoundingClientRect();\n\n  fire(\n    target.el,\n    'move',\n    target.getMove({\n      x: clamp((pointer.pageX - (rect.left + window.pageXOffset)) / rect.width),\n      y: clamp((pointer.pageY - (rect.top + window.pageYOffset)) / rect.height)\n    })\n  );\n};\n\nconst keyMove = (target: Slider, event: KeyboardEvent): void => {\n  // We use `keyCode` instead of `key` to reduce the size of the library.\n  const keyCode = event.keyCode;\n  // Ignore all keys except arrow ones, Page Up, Page Down, Home and End.\n  if (keyCode > 40 || (target.xy && keyCode < 37) || keyCode < 33) return;\n  // Do not scroll page by keys when color picker element has focus.\n  event.preventDefault();\n  // Send relative offset to the parent component.\n  fire(\n    target.el,\n    'move',\n    target.getMove(\n      {\n        x:\n          keyCode === 39 // Arrow Right\n            ? 0.01\n            : keyCode === 37 // Arrow Left\n            ? -0.01\n            : keyCode === 34 // Page Down\n            ? 0.05\n            : keyCode === 33 // Page Up\n            ? -0.05\n            : keyCode === 35 // End\n            ? 1\n            : keyCode === 36 // Home\n            ? -1\n            : 0,\n        y:\n          keyCode === 40 // Arrow down\n            ? 0.01\n            : keyCode === 38 // Arrow Up\n            ? -0.01\n            : 0\n      },\n      true\n    )\n  );\n};\n\nexport abstract class Slider {\n  declare nodes: HTMLElement[];\n\n  declare el: HTMLElement;\n\n  declare xy: boolean;\n\n  constructor(root: ShadowRoot, part: string, aria: string, xy: boolean) {\n    const template = tpl(\n      `<div role=\"slider\" tabindex=\"0\" part=\"${part}\" ${aria}><div part=\"${part}-pointer\"></div></div>`\n    );\n    root.appendChild(template.content.cloneNode(true));\n\n    const el = root.querySelector(`[part=${part}]`) as HTMLElement;\n    el.addEventListener('mousedown', this);\n    el.addEventListener('touchstart', this);\n    el.addEventListener('keydown', this);\n    this.el = el;\n\n    this.xy = xy;\n    this.nodes = [el.firstChild as HTMLElement, el];\n  }\n\n  set dragging(state: boolean) {\n    const toggleEvent = state ? document.addEventListener : document.removeEventListener;\n    toggleEvent(hasTouched ? 'touchmove' : 'mousemove', this);\n    toggleEvent(hasTouched ? 'touchend' : 'mouseup', this);\n  }\n\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'mousedown':\n      case 'touchstart':\n        event.preventDefault();\n        // event.button is 0 in mousedown for left button activation\n        if (!isValid(event) || (!hasTouched && (event as MouseEvent).button != 0)) return;\n        this.el.focus();\n        pointerMove(this, event);\n        this.dragging = true;\n        break;\n      case 'mousemove':\n      case 'touchmove':\n        event.preventDefault();\n        pointerMove(this, event);\n        break;\n      case 'mouseup':\n      case 'touchend':\n        this.dragging = false;\n        break;\n      case 'keydown':\n        keyMove(this, event as KeyboardEvent);\n        break;\n    }\n  }\n\n  abstract getMove(offset: Offset, key?: boolean): Record<string, number>;\n\n  abstract update(hsva: HsvaColor): void;\n\n  style(styles: Array<Record<string, string>>): void {\n    styles.forEach((style, i) => {\n      for (const p in style) {\n        this.nodes[i].style.setProperty(p, style[p]);\n      }\n    });\n  }\n}\n","import { Slider, Offset } from './slider.js';\nimport { hsvaToHslString } from '../utils/convert.js';\nimport { clamp, round } from '../utils/math.js';\nimport type { HsvaColor } from '../types';\n\nexport class Hue extends Slider {\n  declare h: number;\n\n  constructor(root: ShadowRoot) {\n    super(root, 'hue', 'aria-label=\"Hue\" aria-valuemin=\"0\" aria-valuemax=\"360\"', false);\n  }\n\n  update({ h }: HsvaColor): void {\n    this.h = h;\n    this.style([\n      {\n        left: `${(h / 360) * 100}%`,\n        color: hsvaToHslString({ h, s: 100, v: 100, a: 1 })\n      }\n    ]);\n    this.el.setAttribute('aria-valuenow', `${round(h)}`);\n  }\n\n  getMove(offset: Offset, key?: boolean): Record<string, number> {\n    // Hue measured in degrees of the color circle ranging from 0 to 360\n    return { h: key ? clamp(this.h + offset.x * 360, 0, 360) : 360 * offset.x };\n  }\n}\n","import { Slider, Offset } from './slider.js';\nimport { hsvaToHslString } from '../utils/convert.js';\nimport { clamp, round } from '../utils/math.js';\nimport type { HsvaColor } from '../types';\n\nexport class Saturation extends Slider {\n  declare hsva: HsvaColor;\n\n  constructor(root: ShadowRoot) {\n    super(root, 'saturation', 'aria-label=\"Color\"', true);\n  }\n\n  update(hsva: HsvaColor): void {\n    this.hsva = hsva;\n    this.style([\n      {\n        top: `${100 - hsva.v}%`,\n        left: `${hsva.s}%`,\n        color: hsvaToHslString(hsva)\n      },\n      {\n        'background-color': hsvaToHslString({ h: hsva.h, s: 100, v: 100, a: 1 })\n      }\n    ]);\n    this.el.setAttribute(\n      'aria-valuetext',\n      `Saturation ${round(hsva.s)}%, Brightness ${round(hsva.v)}%`\n    );\n  }\n\n  getMove(offset: Offset, key?: boolean): Record<string, number> {\n    // Saturation and brightness always fit into [0, 100] range\n    return {\n      s: key ? clamp(this.hsva.s + offset.x * 100, 0, 100) : offset.x * 100,\n      v: key ? clamp(this.hsva.v - offset.y * 100, 0, 100) : Math.round(100 - offset.y * 100)\n    };\n  }\n}\n","import { equalColorObjects } from '../utils/compare.js';\nimport { fire, tpl } from '../utils/dom.js';\nimport type { AnyColor, ColorModel, HsvaColor } from '../types';\nimport { Hue } from './hue.js';\nimport { Saturation } from './saturation.js';\nimport type { Slider } from './slider.js';\nimport css from '../styles/color-picker.js';\nimport hueCss from '../styles/hue.js';\nimport saturationCss from '../styles/saturation.js';\n\nconst $isSame = Symbol('same');\nconst $color = Symbol('color');\nconst $hsva = Symbol('hsva');\nconst $update = Symbol('update');\nconst $parts = Symbol('parts');\n\nexport const $css = Symbol('css');\nexport const $sliders = Symbol('sliders');\n\nexport type Sliders = Array<new (root: ShadowRoot) => Slider>;\n\nexport abstract class ColorPicker<C extends AnyColor> extends HTMLElement {\n  static get observedAttributes(): string[] {\n    return ['color'];\n  }\n\n  protected get [$css](): string[] {\n    return [css, hueCss, saturationCss];\n  }\n\n  protected get [$sliders](): Sliders {\n    return [Saturation, Hue];\n  }\n\n  protected abstract get colorModel(): ColorModel<C>;\n\n  private declare [$hsva]: HsvaColor;\n\n  private declare [$color]: C;\n\n  private declare [$parts]: Slider[];\n\n  get color(): C {\n    return this[$color];\n  }\n\n  set color(newColor: C) {\n    if (!this[$isSame](newColor)) {\n      const newHsva = this.colorModel.toHsva(newColor);\n      this[$update](newHsva);\n      this[$color] = newColor;\n    }\n  }\n\n  constructor() {\n    super();\n    const template = tpl(`<style>${this[$css].join('')}</style>`);\n    const root = this.attachShadow({ mode: 'open' });\n    root.appendChild(template.content.cloneNode(true));\n    root.addEventListener('move', this);\n    this[$parts] = this[$sliders].map((slider) => new slider(root));\n  }\n\n  connectedCallback(): void {\n    // A user may set a property on an _instance_ of an element,\n    // before its prototype has been connected to this class.\n    // If so, we need to run it through the proper class setter.\n    if (this.hasOwnProperty('color')) {\n      const value = this.color;\n      delete this['color' as keyof this];\n      this.color = value;\n    } else if (!this.color) {\n      this.color = this.colorModel.defaultColor;\n    }\n  }\n\n  attributeChangedCallback(_attr: string, _oldVal: string, newVal: string): void {\n    const color = this.colorModel.fromAttr(newVal);\n    if (!this[$isSame](color)) {\n      this.color = color;\n    }\n  }\n\n  handleEvent(event: CustomEvent): void {\n    // Merge the current HSV color object with updated params.\n    const oldHsva = this[$hsva];\n    const newHsva = { ...oldHsva, ...event.detail };\n    this[$update](newHsva);\n    let newColor;\n    if (\n      !equalColorObjects(newHsva, oldHsva) &&\n      !this[$isSame]((newColor = this.colorModel.fromHsva(newHsva)))\n    ) {\n      this[$color] = newColor;\n      fire(this, 'color-changed', { value: newColor });\n    }\n  }\n\n  private [$isSame](color: C): boolean {\n    return this.color && this.colorModel.equal(color, this.color);\n  }\n\n  private [$update](hsva: HsvaColor): void {\n    this[$hsva] = hsva;\n    this[$parts].forEach((part) => part.update(hsva));\n  }\n}\n","export default `:host{display:flex;flex-direction:column;position:relative;width:200px;height:200px;user-select:none;-webkit-user-select:none;cursor:default}:host([hidden]){display:none!important}[role=slider]{position:relative;touch-action:none;user-select:none;-webkit-user-select:none;outline:0}[role=slider]:last-child{border-radius:0 0 8px 8px}[part$=pointer]{position:absolute;z-index:1;box-sizing:border-box;width:28px;height:28px;display:flex;place-content:center center;transform:translate(-50%,-50%);background-color:#fff;border:2px solid #fff;border-radius:50%;box-shadow:0 2px 4px rgba(0,0,0,.2)}[part$=pointer]::after{content:\"\";width:100%;height:100%;border-radius:inherit;background-color:currentColor}[role=slider]:focus [part$=pointer]{transform:translate(-50%,-50%) scale(1.1)}`;\n","export default `[part=hue]{flex:0 0 24px;background:linear-gradient(to right,red 0,#ff0 17%,#0f0 33%,#0ff 50%,#00f 67%,#f0f 83%,red 100%)}[part=hue-pointer]{top:50%;z-index:2}`;\n","export default `[part=saturation]{flex-grow:1;border-color:transparent;border-bottom:12px solid #000;border-radius:8px 8px 0 0;background-image:linear-gradient(to top,#000,transparent),linear-gradient(to right,#fff,rgba(255,255,255,0));box-shadow:inset 0 0 0 1px rgba(0,0,0,.05)}[part=saturation-pointer]{z-index:3}`;\n","import type { ColorModel, ColorPickerEventListener, ColorPickerEventMap } from '../types';\nimport { ColorPicker } from '../components/color-picker.js';\nimport { hexToHsva, hsvaToHex } from '../utils/convert.js';\nimport { equalHex } from '../utils/compare.js';\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: '#000',\n  toHsva: hexToHsva,\n  fromHsva: hsvaToHex,\n  equal: equalHex,\n  fromAttr: (color) => color\n};\n\nexport interface HexBase {\n  addEventListener<T extends keyof ColorPickerEventMap<string>>(\n    type: T,\n    listener: ColorPickerEventListener<ColorPickerEventMap<string>[T]>,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n\n  removeEventListener<T extends keyof ColorPickerEventMap<string>>(\n    type: T,\n    listener: ColorPickerEventListener<ColorPickerEventMap<string>[T]>,\n    options?: boolean | EventListenerOptions\n  ): void;\n}\n\nexport class HexBase extends ColorPicker<string> {\n  protected get colorModel(): ColorModel<string> {\n    return colorModel;\n  }\n}\n","import { HexBase } from './lib/entrypoints/hex.js';\n\n/**\n * A color picker custom element that uses HEX format.\n *\n * @element hex-color-picker\n *\n * @prop {string} color - Selected color in HEX format.\n * @attr {string} color - Selected color in HEX format.\n *\n * @fires color-changed - Event fired when color property changes.\n *\n * @csspart hue - A hue selector container.\n * @csspart saturation - A saturation selector container\n * @csspart hue-pointer - A hue pointer element.\n * @csspart saturation-pointer - A saturation pointer element.\n */\nexport class HexColorPicker extends HexBase {}\n\ncustomElements.define('hex-color-picker', HexColorPicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hex-color-picker': HexColorPicker;\n  }\n}\n"],"names":["$91f9707681942dce$export$7d15b64cf5a3a4c4","number","min","max","$91f9707681942dce$export$2077e0241d6afd3c","digits","base","Math","pow","round","$1ba67dab66fa937b$export$9665a07d9187b414","PI","hex","substr","length","r","parseInt","g","b","a","$1ba67dab66fa937b$export$ea93620c892f6b62","h","s","v","hh","l","$1ba67dab66fa937b$export$5088895f11133875","hsva","$1ba67dab66fa937b$export$e41dcd4e52af69bc","floor","c","d","module","$1ba67dab66fa937b$var$format","toString","$1ba67dab66fa937b$export$ffee5509a14af63d","$1ba67dab66fa937b$export$f4deeebdec6065f9","delta","$ee55f11835540844$export$2123f06676026de7","first","second","prop","$337b3a3b749251af$var$cache","$337b3a3b749251af$export$5dfe2efd653fcea4","html","template","document","createElement","innerHTML","$337b3a3b749251af$export$46ff36df9b99bc25","target","type","detail","dispatchEvent","CustomEvent","bubbles","$97e8c5b9bf627902$var$hasTouched","$97e8c5b9bf627902$var$isTouch","e","$97e8c5b9bf627902$var$pointerMove","event","pointer","touches","rect","el","getBoundingClientRect","getMove","x","pageX","left","window","pageXOffset","width","y","pageY","top","pageYOffset","height","$97e8c5b9bf627902$export$472062a354075cee","dragging","state","toggleEvent","addEventListener","removeEventListener","this","handleEvent","preventDefault","$97e8c5b9bf627902$var$isValid","button","focus","keyCode","xy","$97e8c5b9bf627902$var$keyMove","style","styles","forEach","i","p","nodes","setProperty","constructor","root","part","aria","appendChild","content","cloneNode","querySelector","firstChild","$b1aaa7d613c9d116$export$3e22a96a58989a47","update","color","setAttribute","offset","key","super","$9349a3560171b773$export$c4dbe12ffaee3c8e","$8a57a7474116f28a$var$$isSame","Symbol","$8a57a7474116f28a$var$$color","$8a57a7474116f28a$var$$hsva","$8a57a7474116f28a$var$$update","$8a57a7474116f28a$var$$parts","$8a57a7474116f28a$export$639d3bf3586a8ae1","$8a57a7474116f28a$export$6892090d606d23aa","$8a57a7474116f28a$export$9feb1bc2e5f1ccb3","HTMLElement","observedAttributes","newColor","newHsva","colorModel","toHsva","connectedCallback","hasOwnProperty","value","defaultColor","attributeChangedCallback","_attr","_oldVal","newVal","fromAttr","oldHsva","fromHsva","equal","join","attachShadow","mode","map","slider","$728f58e45682b140$var$colorModel","toLowerCase","$728f58e45682b140$export$aac89129a4eb37b4","customElements","define"],"version":3,"file":"index.fef1afbd.js.map"}